from rest_framework import serializers

from .models import Comment, Task, TaskCategory


class TaskCategorySerializer(serializers.ModelSerializer):
    """
    Serializer for task category.
    """

    class Meta:
        model = TaskCategory
        fields = ["id", "title"]


class TaskSerializer(serializers.ModelSerializer):
    """
    Compact task info for list views (no body, no author name) with additional fields createdb by `annotate()`:
    category_title, comments_count, new_comments_count, is_favorite, is_acquainted (last three depending on current
    user).
    """

    # These fields will be generated by `annotate()` in TaskListAPI.get_queryset():
    category_title = serializers.CharField()
    comments_count = serializers.IntegerField()
    new_comments_count = serializers.IntegerField()
    is_favorite = serializers.BooleanField()
    is_acquainted = serializers.BooleanField()

    class Meta:
        model = Task
        fields = [
            "id",
            "category",
            "category_title",
            "title",
            "is_private",
            "is_archived",
            "attachment",
            "due_date",
            "created",
            "updated",
            "is_completed",
            "completed",
            "comments_count",
            "new_comments_count",
            "is_favorite",
            "is_acquainted",
        ]


class TaskDetailSerializer(TaskSerializer):
    """
    Has additional fields for detail view: author_last_name, author_first_name, author_second_name, author_avatar_url,
    body.
    """

    author_last_name = serializers.CharField()
    author_first_name = serializers.CharField()
    author_second_name = serializers.CharField()
    author_avatar_url = serializers.URLField()

    class Meta:
        model = Task
        fields = [
            "id",
            "author",
            "author_last_name",
            "author_first_name",
            "author_second_name",
            "author_avatar_url",
            "category",
            "category_title",
            "title",
            "body",
            "is_private",
            "is_archived",
            "attachment",
            "due_date",
            "created",
            "updated",
            "is_completed",
            "completed",
            "comments_count",
            "new_comments_count",
            "is_favorite",
            "is_acquainted",
        ]


class CommentSerializer(serializers.ModelSerializer):
    """
    Serializer for comments.
    Has additional fields created by `annotate()`: author_last_name, author_first_name, author_second_name,
    author_avatar_url, is_acquainted (last depends on current user).
    """

    author_last_name = serializers.CharField()
    author_first_name = serializers.CharField()
    author_second_name = serializers.CharField()
    author_avatar_url = serializers.URLField()
    is_acquainted = serializers.BooleanField()

    class Meta:
        model = Comment
        fields = [
            "id",
            "task",
            "author",
            "author_last_name",
            "author_first_name",
            "author_second_name",
            "author_avatar_url",
            "body",
            "is_archived",
            "created",
            "updated",
            "is_acquainted",
        ]


class CommentCreateSerializer(serializers.ModelSerializer):
    """
    Serializer for creating new comments.
    """

    class Meta:
        model = Comment
        fields = [
            "id",
            "task",
            "author",
            "body",
        ]


class CommentEditSerializer(serializers.ModelSerializer):
    """
    Serializer for comment edits.
    """

    class Meta:
        model = Comment
        fields = [
            "id",
            "body",
        ]
